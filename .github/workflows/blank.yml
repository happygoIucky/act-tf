name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  ACK_CLUSTER_ID: c75b865d84bc0414494282aa5ebf384c9
  ALIYUN_REGION: ap-southeast-1

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash


    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3



    - name: auth to ACK
      uses: aliyun/ack-set-context@v1
      with:
        access-key-id: ${{ secrets.ACCESS_KEY_ID}}
        access-key-secret: ${{ secrets.ACCESS_KEY_SECRET }}
        cluster-id: "${{ env.ACK_CLUSTER_ID }}"
    
    - name: get pod
      run: |-
        kubectl apply -f husky-pod.yaml

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        TF_VAR_access_key: ${{ secrets.ACCESS_KEY_ID}}
        TF_VAR_secret_key: ${{ secrets.ACCESS_KEY_SECRET }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      env:
        TF_VAR_access_key: ${{ secrets.ACCESS_KEY_ID}}
        TF_VAR_secret_key: ${{ secrets.ACCESS_KEY_SECRET }}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Destroy
      run: terraform destroy -auto-approve -input=false
      env:
        TF_VAR_access_key: ${{ secrets.ACCESS_KEY_ID}}
        TF_VAR_secret_key: ${{ secrets.ACCESS_KEY_SECRET }}